using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.OleDb;
using System.IO;

using Excel = Microsoft.Office.Interop.Excel;
using Microsoft.Office.Interop.Excel;
using System.Runtime.InteropServices;
using System.Threading;
using System.Diagnostics;
using DataTable = System.Data.DataTable;
using NPOI.SS.UserModel;
using NPOI.HSSF.UserModel;
using NPOI.XSSF.UserModel;

namespace EveryTeacher
{
    public partial class SplitExcel : Form
    {

        Excel.Application excelApp;
        Excel.Workbook excelWorkbook;
        Excel.Worksheet excelWorkSheet;
        Excel.Range range;
        String fileName = "";

        public SplitExcel()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            //指定Excel檔案路徑
            string str = System.Windows.Forms.Application.StartupPath + "\\input_file";
            //-----------------------下拉選單製作
            
        }
        private void btn_select_file_Click(object sender, EventArgs e)
        {
            fileName = ImportExcelFile();

            readExcel(@"D:\Gitlab\VisualC#Project\EveryTeacher\bin\Debug\測試.xlsx", 1);

            //開啟Excel
            excelApp = new Excel.Application();
            excelWorkbook = excelApp.Workbooks.Open(fileName, 0, true, 5, "", "", true,
              Microsoft.Office.Interop.Excel.XlPlatform.xlWindows
             , "\t", false, false, 0, true, 1, 0);
            //-----------------------worksheet下拉選單
            Excel.Worksheet xlWorkSheet2;
            lb_sys_info.Text = "Excel工作表載入中";
            for (int i = 1; i <= excelWorkbook.Sheets.Count; i++) //計算總共有幾個工作表
            {
                //取得該工作表
                xlWorkSheet2 = (Excel.Worksheet)excelWorkbook.Worksheets[i];
                //將該工作表名稱加入下拉選單
               
            }
            lb_sys_info.Text = "Excel工作表載入完成";
            //使用完EXCEL資源釋放
            excelApp.Quit();
            SplitExcel.KillExcelApp(excelApp);
        }
        private System.Data.DataTable _tb = new System.Data.DataTable("table");
        DataRow _NewRow;
        Thread _read_execel_data;
        private void btn_select_sheet_Click(object sender, EventArgs e)
        {
            /*lb_load_data_count.Visible = true;
            _read_execel_data = new Thread(read_execel_data);
            _read_execel_data.Start();*/
        }
        /*private void read_execel_data()
        {
            string[] teachers;
            int teacherIndex = 0;
            int teacherCount = 0;
            int wantToReadRows = 20;
            int select_sheet = 0;  //select_sheet第幾個工作表
            string str = System.Windows.Forms.Application.StartupPath;
            //開啟Excel
            excelApp = new Excel.Application();
            this.Invoke((MethodInvoker)delegate
            {
                dataGridView1.DataSource = null;
                _tb.Clear(); //清空表格
                _tb.Rows.Clear();//清空資料
                _tb.Columns.Clear();
            });
            try
            {
                excelWorkbook = excelApp.Workbooks.Open(fileName, 0, true, 5, "", "", true,
                 Microsoft.Office.Interop.Excel.XlPlatform.xlWindows
                  , "\t", false, false, 0, true, 1, 0);
            }
            catch
            {
                MessageBox.Show("未選擇檔案");
                return;
            }
            //取得下拉選單數值讀取指定工作表
            this.Invoke((MethodInvoker)delegate
            {                
                select_sheet = 1;
                excelWorkSheet = (Excel.Worksheet)excelWorkbook.Worksheets[select_sheet];
                range = excelWorkSheet.UsedRange;//讀取Excel列與行資訊
            });
            int rw = range.Rows.Count;     //直 (總行數)
            int cl = range.Columns.Count;  //橫 (總列數)
            int sum = rw;
            DataColumn[] colItem = new DataColumn[cl + 1];
            String[] title = new String[cl + 1];
            Excel.Worksheet excelSheet =
           (Excel.Worksheet)excelWorkbook.Worksheets[select_sheet];
            //-----------------------------表格欄位製作
            for (int i = 1; i <= cl; i++)
            {
                //將Table Titile塞入Excel第一列作為標題 [1,n]
                Excel.Range rng = (Excel.Range)excelSheet.Cells[1, i];
                try
                {
                    colItem[i] = new DataColumn(rng.Value, Type.GetType("System.String"));
                    title[i] = rng.Value;
                }
                catch
                {
                    colItem[i] = new DataColumn(" ", Type.GetType("System.String"));
                }
                _tb.Columns.Add(colItem[i]);
            }
            sum = rw - 1;
            lb_sys_info.Invoke((MethodInvoker)delegate
            {
                lb_sys_info.Text = "Excel工作表內容載入中";
            });

            teachers = new string[wantToReadRows];

            for (int i = 2; i <= wantToReadRows; i++)
            {
                lb_load_data_count.Invoke((MethodInvoker)delegate
                {
                    lb_load_data_count.Text =
                    "尚有 " + (wantToReadRows - i - 1).ToString() + " 筆資料未加入";
                });

                
                _NewRow = _tb.NewRow(); //開新的一列
                for (int j = 1; j <= cl; j++)
                {
                    try
                    {
                        Excel.Range rng = (Excel.Range)excelSheet.Cells[i, j];
                        //讀取 Excel每格內容
                        _NewRow[title[j]] = rng.Value.ToString(); //將取得的值存入陣列
                    }
                    catch
                    {
                        _NewRow[title[j]] = "";
                    }
                }

               text.Invoke((MethodInvoker)delegate
                {
                    try
                    {
                        Excel.Range rng = (Excel.Range)excelSheet.Cells[i, 4];
                        text.Text = "("+ i + ")" +rng.Value.ToString(); //將取得的值存入陣列

                        for(teacherIndex = 0; teacherIndex < teacherCount; teacherIndex++)
                        {
                            if (teachers[teacherIndex] == rng.Value.ToString())
                            {
                                //addNewTeacher = false;
                                break;
                            }
                            //else
                            //{
                            //    addNewTeacher = true;
                            //}
                        }
                        if(teacherIndex == teacherCount)
                        {
                            teachers[teacherCount] = rng.Value.ToString();
                            teacherCount++; 
                        }

                      
                    }
                    catch (Exception ex)
                    {
                        text.Text = ex.Message.ToString();
                    }
                });
                


                this.Invoke((MethodInvoker)delegate
                {
                    _tb.Rows.Add(_NewRow);
                });
            }
            this.Invoke((MethodInvoker)delegate
            {
                _tb.AcceptChanges();
                dataGridView1.AutoSizeColumnsMode
                = DataGridViewAutoSizeColumnsMode.DisplayedCells;
                dataGridView1.DataSource = _tb;
                lb_load_data_count.Visible = false;
            });

            DataSet set = new DataSet();
            set.Tables.Add(_tb);
            //bool b = DataTableToExcel(set, "test2.xlsx");

            text.Invoke((MethodInvoker)delegate
            {
                string allTeachers = "";
                foreach(string teacher in teachers)
                {
                    allTeachers += teacher + "\n";
                }
                text.Text = allTeachers;
            });

            //使用完EXCEL資源釋放
            excelApp.Quit();
            SplitExcel.KillExcelApp(excelApp);
            lb_sys_info.Invoke((MethodInvoker)delegate
            {
                lb_sys_info.Text = "Excel工作表內容載入完成";
            });
            _read_execel_data.Abort();
        }
        */
        // release excel resource
        [DllImport("User32.dll")]
        public static extern int GetWindowThreadProcessId
        (IntPtr hWnd, out int ProcessId);

        public static void KillExcelApp(Excel.Application app)
        {
            if (app != null)
            {
                try
                {
                    app.Quit();
                    IntPtr intptr = new IntPtr(app.Hwnd);
                    var ps = Process.GetProcessesByName("EXCEL").ToList();
                    int id;
                    GetWindowThreadProcessId(intptr, out id);
                    var p = Process.GetProcessById(id);
                    //if (p != null)
                    p.Kill();
                }
                catch (Exception)
                {
                }
            }
        }

        public String ImportExcelFile()
        {
            string windowFilter = "Excel files|*.xlsx";
            string windowTitle = "匯入Excel資料";

            OpenFileDialog openFileDialogFunction = new OpenFileDialog();
            openFileDialogFunction.Filter = windowFilter; //開窗搜尋副檔名
            openFileDialogFunction.Title = windowTitle; //開窗標題

            DataTable dataTable = new DataTable();

            if (openFileDialogFunction.ShowDialog() == DialogResult.OK)
            {
                string FilePath = openFileDialogFunction.FileName;
                return FilePath;
            }

            return "";
        }

        public void DataTableToTxtFile(sendMailObject[] smobjs, string file)
        {
            string csvData = "";
            foreach(sendMailObject sendMail in smobjs)
            {
                csvData += sendMail.sendName + ", ";
                csvData += sendMail.sendto + ", ";
                csvData += sendMail.CC + ", ";
                csvData += sendMail.attach + ", ";
                csvData += sendMail.title + ", ";
                csvData += sendMail.subject + "\n";
            }

            StreamWriter sw = new StreamWriter(file, false, Encoding.UTF8);
            sw.Write(csvData);
            sw.Close();
        }

        public static bool DataTableToExcel(DataSet dataSet, string Outpath)
        {
            bool result = false;
            try
            {
                if (dataSet == null || dataSet.Tables == null || dataSet.Tables.Count == 0 || string.IsNullOrEmpty(Outpath))
                    throw new Exception("輸入的DataSet或路徑例外");
                int sheetIndex = 0;
                //根據輸出路徑的擴展名判斷workbook的實體型別
                IWorkbook workbook = null;
                string pathExtensionName = Outpath.Trim().Substring(Outpath.Length - 5);
                if (pathExtensionName.Contains(".xlsx"))
                {
                    workbook = new XSSFWorkbook();
                }
                else if (pathExtensionName.Contains(".xls"))
                {
                    workbook = new HSSFWorkbook();
                }
                else
                {
                    Outpath = Outpath.Trim() + ".xls";
                    workbook = new HSSFWorkbook();
                }
                //將DataSet匯出為Excel
                foreach (DataTable dt in dataSet.Tables)
                {
                    sheetIndex++;
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        ISheet sheet = workbook.CreateSheet(string.IsNullOrEmpty(dt.TableName) ? ("sheet" + sheetIndex) : dt.TableName);//創建一個名稱為Sheet0的表
                        int rowCount = dt.Rows.Count;//行數
                        int columnCount = dt.Columns.Count;//列數

                        //設定列頭
                        IRow row = sheet.CreateRow(0);//excel第一行設為列頭
                        for (int c = 0; c < columnCount; c++)
                        {
                            ICell cell = row.CreateCell(c);
                            cell.SetCellValue(dt.Columns[c].ColumnName);
                        }

                        //設定每行每列的單元格,
                        for (int i = 0; i < rowCount; i++)
                        {
                            row = sheet.CreateRow(i + 1);
                            for (int j = 0; j < columnCount; j++)
                            {
                                ICell cell = row.CreateCell(j);//excel第二行開始寫入資料
                                cell.SetCellValue(dt.Rows[i][j].ToString());
                            }
                        }
                    }
                }
                //向outPath輸出資料
                using (FileStream fs = File.OpenWrite(Outpath))
                {
                    workbook.Write(fs);//向打開的這個xls檔案中寫入資料
                    result = true;
                }
                return result;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        static void readExcel(string path, int indexOfSheet)
        {
            Excel.Application App = new Excel.Application();

            //取得欲寫入的檔案路徑
            Excel.Workbook Wbook = App.Workbooks.Open(path, 0, true, 5, "", "", true,
                 Microsoft.Office.Interop.Excel.XlPlatform.xlWindows
                  , "\t", false, false, 0, true, 1, 0);

            //將欲修改的檔案屬性設為非唯讀(Normal)，若寫入檔案為唯讀，則會無法寫入
            System.IO.FileInfo xlsAttribute = new FileInfo(path);
            xlsAttribute.Attributes = FileAttributes.Normal;

            //取得batchItem的工作表
            Excel.Worksheet Wsheet = (Excel.Worksheet)Wbook.Sheets[indexOfSheet];

            Excel.Range row = Wsheet.Rows[4];
            Excel.Range column = Wsheet.Columns[5];

            Excel.Range cell = (Excel.Range)Wsheet.Cells[3, 4];
            Excel.Range rng = (Excel.Range)Wsheet.Cells[3, 4];
            string val = rng.Value.ToString();

            //關閉EXCEL
            Wbook.Close();

            //離開應用程式
            App.Quit();
        }


        static void writeToExcel(string path, int indexOfSheet)
        {
            Excel.Application App = new Excel.Application();

            //取得欲寫入的檔案路徑
            Excel.Workbook Wbook = App.Workbooks.Open(path);

            //將欲修改的檔案屬性設為非唯讀(Normal)，若寫入檔案為唯讀，則會無法寫入
            System.IO.FileInfo xlsAttribute = new FileInfo(path);
            xlsAttribute.Attributes = FileAttributes.Normal;

            //取得batchItem的工作表
            Excel.Worksheet Wsheet = (Excel.Worksheet)Wbook.Sheets[indexOfSheet];
            //Wbook.Worksheets.Add()

            //取得工作表的單元格
            //列(左至右)ABCDE、行(上至下)12345
            Excel.Range aRangeChange = Wsheet.get_Range("B7");

            //在工作表的特定儲存格，設定內容
            aRangeChange.Value2 = "施argaza";

            //設置禁止彈出保存和覆蓋的詢問提示框
            Wsheet.Application.DisplayAlerts = false;
            Wsheet.Application.AlertBeforeOverwriting = false;

            //保存工作表，因為禁止彈出儲存提示框，所以需在此儲存，否則寫入的資料會無法儲存
            Wbook.Save();

            //關閉EXCEL
            Wbook.Close();

            //離開應用程式
            App.Quit();
        }
    }

    public class sendMailObject
    {
        public string sendName;
        public string sendto;
        public string CC;
        public string attach;
        public string title;
        public string subject;
    }
}
